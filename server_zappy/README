

/* --------------------------------- MAP ----------------------------------- */

--- General ---

uint            get_map_height(void);
uint            get_map_width(void);
uint		get_map_max(void);

t_box *         get_box(uint x, uint y);
return all information at position "x", "y" or NULL if position is invalid.
t_list * stones
t_players * players
t_list * eggs
unit food
--> avoid using them directly. please use functions below.

--- Browse map (1) ---
y = 0;
while (y < get_map_height())
{
	while (x < get_map_width())
	{
		box = get_box(x, y);
		++x;
	}
	++y;	
}

--- Browse map (2) ---
i = 0;
while (i < get_map_max())
{
	box = get_box_at(i);
	++i;
}

--- Stones ---

bool            setbox_addstone(uint x, uint y, e_stone type, uint nb);
Add "nb" stones of type "type" at position "x", "y".
Return false on failure (invalid position, allocation failed).

bool            setbox_delstone(uint x, uint y, e_stone type, uint nb)
Remove "nb" stones of type "type" at position "x", "y"
Return false on failure (invalid position, invalid stone type).
If stone->nb < nb, stone->nb = 0

uint		getbox_nbstones(uint x, uint y, e_stone type);
Return how many stones of type "type" "are at position "x", "y".
Return 0 if position is invalid.

--- Players ---

t_player *		new_player(void);
create a new blank player.

bool			setbox_add_player(t_player * player,
			char * name, uint x, uint y);
Add the player "player" in team "name" at position "x", "y" on the map.
If team didnt exist, team is created.
Return false on failure (invalid position, allocation failed).

t_list *		get_players(unit x, uint y);
Return the list of players at position "x", "y".

void			setbox_del_player(t_player * player);
delete a player (and remove pointers everywhere o__o).

--- Teams ---

t_team *		get_team_by_name(char * name);
return the team "name" or NULL if the team didnt exists.

t_team *		get_team_of_player(t_player * player);
return the team where player is.

t_list *		get_teams(void);
return the list of teams.

